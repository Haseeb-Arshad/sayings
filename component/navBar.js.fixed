'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import {
  FaBars,
  FaTimes,
  FaHome,
  FaCompass,
  FaUser,
  FaMicrophone,
  FaBell,
  FaSearch,
  FaHeadphones
} from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
import styles from '../styles/Navbar.module.css';
import { useRouter } from 'next/navigation';
import { useAuth } from '../context/useAuth';
import axiosInstance from '@/utils/axiosInstance';

const Navbar = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isOffline, setIsOffline] = useState(false);
  const { push } = useRouter();
  const { user, logout } = useAuth();

  const isActive = (path) => window.location.pathname === path;

  const navItems = [
    { id: 'home', label: 'Home', path: '/', icon: <FaHome /> },
    { id: 'explore', label: 'Explore', path: '/explore', icon: <FaCompass /> },
    { id: 'profile', label: 'Profile', path: '/profile', icon: <FaUser /> },
    { id: 'listen', label: 'Listen', path: '/listen', icon: <FaHeadphones /> }
  ];

  const handleNavClick = (path) => {
    push(path);
    setIsMobileMenuOpen(false);
    
    // Close the mobile menu if it's open
    if (isMobileMenuOpen) {
      setIsMobileMenuOpen(false);
    }
  };

  const handleLogout = async () => {
    try {
      if (isOffline) {
        alert('You are currently offline. Please check your connection and try again.');
        return;
      }

      await axiosInstance.post('/api/auth/logout');
      await logout();
      push('/login');
    } catch (error) {
      console.error('Error during logout:', error);
    }
  };

  useEffect(() => {
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  useEffect(() => {
    const handleOnlineStatus = () => setIsOffline(!navigator.onLine);
    
    window.addEventListener('online', handleOnlineStatus);
    window.addEventListener('offline', handleOnlineStatus);
    
    // Initial check
    setIsOffline(!navigator.onLine);
    
    return () => {
      window.removeEventListener('online', handleOnlineStatus);
      window.removeEventListener('offline', handleOnlineStatus);
    };
  }, []);

  // Animation variants for menu items
  const navVariants = {
    visible: (i) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.1,
      }
    }),
    hidden: { opacity: 0, y: -20 }
  };

  return (
    <motion.nav 
      className={styles.navbar}
      initial={{ y: -50 }}
      animate={{ y: 0 }}
      transition={{ type: 'spring', stiffness: 120 }}
    >
      {/* Offline indicator */}
      {isOffline && (
        <div className={styles.offlineIndicator}>You are offline. Some features may be unavailable.</div>
      )}

      {/* Desktop Navigation */}
      <nav className={styles.desktopNav}>
        <div className={styles.navSection}>
          {/* Logo */}
          <Link href="/" className={styles.logo} onClick={() => handleNavClick('/')}>
            <motion.div 
              className={styles.logoIcon}
              whileHover={{ scale: 1.1, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <FaMicrophone />
            </motion.div>
            <motion.span 
              className={styles.logoText}
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
            >
              Sayings
            </motion.span>
          </Link>

          {/* Desktop Nav Items */}
          <div className={styles.navItems}>
            {navItems.map((item, i) => (
              <motion.div
                key={item.id}
                custom={i}
                variants={navVariants}
                initial="hidden"
                animate="visible"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className={`${styles.navItem} ${isActive(item.path) ? styles.active : ''}`}
                onClick={() => handleNavClick(item.path)}
              >
                <div className={styles.navIcon}>{item.icon}</div>
                <span className={styles.navLabel}>{item.label}</span>
              </motion.div>
            ))}
          </div>
        </div>

        <div className={styles.navSection}>
          {/* Search Bar */}
          <div className={styles.searchContainer}>
            <FaSearch className={styles.searchIcon} />
            <input
              type="text"
              placeholder="Search..."
              className={styles.searchInput}
            />
          </div>

          {/* User Actions */}
          <div className={styles.userActions}>
            {user ? (
              <>
                {/* Notification Button */}
                <motion.button
                  className={styles.iconButton}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <FaBell />
                  <span className={styles.notificationBadge}>3</span>
                </motion.button>

                {/* Record Button */}
                <Link href="/record" className={styles.recordButton}>
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    className={styles.recordButtonInner}
                  >
                    <FaMicrophone />
                    <span>Record</span>
                  </motion.div>
                </Link>

                {/* User Avatar / Profile */}
                <Link href="/profile">
                  <motion.div
                    className={styles.avatar}
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    {user.avatar ? (
                      <img src={user.avatar} alt="Profile" />
                    ) : (
                      <div className={styles.defaultAvatar}>
                        {user.name ? user.name.charAt(0) : 'U'}
                      </div>
                    )}
                  </motion.div>
                </Link>
              </>
            ) : (
              <div className={styles.authButtons}>
                <motion.button
                  className={styles.loginButton}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => push('/login')}
                >
                  Log In
                </motion.button>
                <motion.button
                  className={styles.signupButton}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => push('/register')}
                >
                  Sign Up
                </motion.button>
              </div>
            )}
          </div>

          {/* Mobile Menu Toggle */}
          <motion.button
            className={styles.mobileMenuToggle}
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            aria-label="Toggle mobile menu"
            whileTap={{ scale: 0.95 }}
          >
            <FaBars />
          </motion.button>
        </div>
      </nav>

      {/* Mobile Menu (Off Canvas) */}
      <AnimatePresence>
        {isMobileMenuOpen && (
          <>
            {/* Overlay */}
            <motion.div
              className={styles.overlay}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              onClick={() => setIsMobileMenuOpen(false)}
            ></motion.div>

            {/* Mobile Drawer */}
            <motion.div
              className={styles.mobileNav}
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: 'tween', duration: 0.3 }}
            >
              <div className={styles.mobileNavHeader}>
                <Link href="/" className={styles.mobileLogo} onClick={() => handleNavClick('/')}>
                  <div className={styles.logoIcon}>
                    <FaMicrophone />
                  </div>
                  <span>Sayings</span>
                </Link>
                <motion.button
                  className={styles.closeButton}
                  onClick={() => setIsMobileMenuOpen(false)}
                  aria-label="Close menu"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <FaTimes />
                </motion.button>
              </div>

              <div className={styles.mobileNavItems}>
                <motion.div
                  whileHover={{ x: 5 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Link href="/" className={styles.mobileNavItem} onClick={() => setIsMobileMenuOpen(false)}>
                    <FaHome size={20} />
                    <span>Home</span>
                  </Link>
                </motion.div>
                
                <motion.div
                  whileHover={{ x: 5 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Link href="/explore" className={styles.mobileNavItem} onClick={() => setIsMobileMenuOpen(false)}>
                    <FaCompass size={20} />
                    <span>Explore</span>
                  </Link>
                </motion.div>

                <motion.div
                  whileHover={{ x: 5 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Link href="/profile" className={styles.mobileNavItem} onClick={() => setIsMobileMenuOpen(false)}>
                    <FaUser size={20} />
                    <span>Profile</span>
                  </Link>
                </motion.div>

                {user && (
                  <motion.div
                    whileHover={{ x: 5 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Link href="/listen" className={styles.mobileNavItem} onClick={() => setIsMobileMenuOpen(false)}>
                      <FaHeadphones size={20} />
                      <span>Listen Along</span>
                    </Link>
                  </motion.div>
                )}
              </div>

              {/* Search in mobile menu */}
              <div className={styles.mobileSearchContainer}>
                <FaSearch className={styles.searchIcon} />
                <input
                  type="text"
                  placeholder="Search..."
                  className={styles.mobileSearchInput}
                />
              </div>

              {/* Auth buttons in mobile menu */}
              <div className={styles.mobileAuthContainer}>
                {user ? (
                  <motion.button
                    className={styles.signupButton}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleLogout}
                  >
                    Logout
                  </motion.button>
                ) : (
                  <div className={styles.authButtons}>
                    <motion.button
                      className={styles.loginButton}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => {
                        push('/login');
                        setIsMobileMenuOpen(false);
                      }}
                    >
                      Log In
                    </motion.button>
                    <motion.button
                      className={styles.signupButton}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => {
                        push('/register');
                        setIsMobileMenuOpen(false);
                      }}
                    >
                      Sign Up
                    </motion.button>
                  </div>
                )}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </motion.nav>
  );
};

export default React.memo(Navbar);
